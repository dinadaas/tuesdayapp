{"version":3,"sources":["KS.png","firebase.js","FormContainer.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FormContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","defineProperty","target","name","value","onSubmit","preventDefault","volunteerRef","database","ref","volunteer","firstname","state","firstName","middleinitial","middleInitial","lastname","lastName","birthday","dateInput","interest","push","handleChange","bind","assertThisInitialized","event","alert","_this$state","react_default","a","createElement","className","Container","Row","Col","Form","Group","controlId","Label","Control","type","placeholder","as","htmlFor","node_modules_react_datez","allowPast","allowFuture","dateFromat","Button","variant","Component","Nav","Navbar","bg","Brand","href","src","require","style","width","height","alt","App","src_Nav","src_FormContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b60680b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/KS.d8b6abac.png\";","import firebase from 'firebase';\nvar config = {\n  apiKey: \"AIzaSyCxMLAZnWrOcrWbAJVMozS1ndoAgetWfiM\",\n  authDomain: \"tuesdayapp-3a925.firebaseapp.com\",\n  databaseURL: \"https://tuesdayapp-3a925.firebaseio.com\",\n  projectId: \"tuesdayapp-3a925\",\n  storageBucket: \"tuesdayapp-3a925.appspot.com\",\n  messagingSenderId: \"676384469148\"\n};\nfirebase.initializeApp(config);\nexport default firebase;\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Form, Button, Col, Container, Row} from 'react-bootstrap';\nimport 'react-datez/dist/css/react-datez.css';\nimport { ReactDatez } from 'react-datez';\nimport firebase from './firebase.js';\n// import firebase from 'firebase/app';\nimport 'firebase/database';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n        firstName: '',\n        middleInitial: '',\n        lastName: '',\n        dateInput: '',\n        interest: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    // this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(value) {\n      this.setState({ dateInput: value })\n  }\n  onChange = (e) => {\n        /*\n          Because we named the inputs to match their\n          corresponding values in state, it's\n          super easy to update the state\n        */\n        this.setState({ [e.target.name]: e.target.value });\n      }\n\n  onSubmit = (e) => {\n          e.preventDefault();\n          const volunteerRef = firebase.database().ref('volunteers');\n          const volunteer = {\n            firstname: this.state.firstName,\n            middleinitial: this.state.middleInitial,\n            lastname: this.state.lastName,\n            birthday: this.state.dateInput,\n            interest: this.state.interest\n          }\n          volunteerRef.push(volunteer);\n          this.setState({\n            firstName: '',\n            middleInitial: '',\n            lastName: '',\n            dateInput: '',\n            interest: ''\n          });\n      }\n\n\n  handleSubmit(event) {\n    alert(this.state.firstName)\n    alert(this.state.middleInitial)\n    alert(this.state.lastName)\n    alert(this.state.dateInput)\n    alert(this.state.interest)\n\n    event.preventDefault()\n  }\n\n\n\n\n  render() {\n     const { firstName, middleInitial, lastName, dateInput, interest } = this.state;\n    return (\n      <div className=\"Form\">\n      <header className=\"App-header\">\n      <Container>\n        <Row>\n          <Col>\n            <h1>\n            Volunteer for Karen\n            </h1>\n            <p>\n            Creating change requires your engagement. In order to succeed, we need your help.\n            </p>\n            <p>\n            Add your name now to volunteer for Karen Smith's campaign for Michigan's 8th Congressional District.\n            </p>\n          </Col>\n          <Col>\n          <Form onSubmit={this.onSubmit}>\n            <Form.Row>\n              <Col>\n                <Form.Group controlId=\"formFirstName\">\n                  <Form.Label>First Name</Form.Label>\n                  <Form.Control type=\"text\" placeholder=\"First Name\" name=\"firstName\" value={firstName} onChange={this.onChange} />\n                </Form.Group>\n                </Col>\n                <Col>\n                <Form.Group controlId=\"formMiddleInitial\">\n                  <Form.Label>M.I.</Form.Label>\n                  <Form.Control type=\"text\" placeholder=\"M.I.\" name=\"middleInitial\" value={middleInitial} onChange={this.onChange}/>\n                </Form.Group>\n                </Col>\n                <Col>\n                <Form.Group controlId=\"formLastName\">\n                  <Form.Label>Last Name</Form.Label>\n                  <Form.Control type=\"text\" placeholder=\"Last Name\" name=\"lastName\" value={lastName} onChange={this.onChange}/>\n                </Form.Group>\n                </Col>\n              </Form.Row>\n\n              <Form.Row>\n                <Col>\n                  <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                    <Form.Label>Interests</Form.Label>\n                    <Form.Control as=\"select\" name=\"interest\" value={interest} onChange={this.onChange}>\n                      <option>I'd like to...</option>\n                      <option>Register voters</option>\n                      <option>Knock on doors</option>\n                      <option>Make phone calls</option>\n                      <option>Text volunteers</option>\n                      <option>Come into headquarters</option>\n                    </Form.Control>\n                  </Form.Group>\n                </Col>\n                <Col>\n                  <Form.Group>\n                  <Form.Label htmlFor=\"exampleDate2\">DOB</Form.Label>\n                  <ReactDatez name=\"dateInput\"\n                  handleChange={this.handleChange}\n                  value={dateInput}\n                  allowPast= {true}\n                  allowFuture= {false}\n                  dateFromat=\"MM/DD/YYYY\"\n                  />\n                  </Form.Group>\n                </Col>\n              </Form.Row>\n\n              <Button variant=\"outline-danger\" type=\"submit\">\n                Sign Up\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n        </header>\n      </div>\n    );\n  }\n  }\n\nexport default FormContainer;\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Navbar} from 'react-bootstrap';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nclass Nav extends Component {\n  render() {\n    return (\n      <div className=\"Title\">\n      <Navbar bg=\"light\">\n        <Navbar.Brand href=\"#home\">\n          <img src={ require('./KS.png') } style={{width: 200, height: 200}} alt=\"logo\"/>\n        </Navbar.Brand>\n      </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport './App.css';\nimport FormContainer from './FormContainer';\nimport Nav from './Nav';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n            <Nav/>\n            <FormContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// ReactDOM.render(\n//     <Nav />,\n//     <App />,\n//   document.getElementById('root')\n// )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}